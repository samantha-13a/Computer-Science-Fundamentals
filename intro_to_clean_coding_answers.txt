EXERCISES

1. In your own words, explain what clean code is and why it is important.

From what I see, clean code is subjective and different developers can have different valid 
opinions on what constitutes it. It is, for sure, easy to understand and easy to change, not 
only by the original programmer, but also by other programmers who may be tasked with working on 
it. It should adhere to the DRY principle. Debugging clean code is simpler than debugging code 
that is less clean. Clean code is important primarily because it is a time-saver. When code 
isn't clean, it lowers work efficiency. 


2. Read this article about Toyota and their use of bad code. Although you may not yet understand 
all of the topics discussed, think about another commonly used object that relies on computers 
and explain what would happen if the code was not created to an acceptable standard.

The first thing that came to my mind, as a past employee of Disneyland and Universal Studios 
Hollywood, is amusement park rides. There's a similarity to Toyota and that issue, but amusement 
park rides literally take the person's life into their figurative hands in totality. The ride 
passenger gives up complete control when they board an attraction, and if everything doesn't 
execute perfectly, especially on a bigger attraction like a rollercoaster, you can face death 
and disaster. For instance, with rollercoasters, there are generally two or even three running 
on the same track at once. If the timing is off, the cars could collide on the tracks. 


3. Would you consider the following to be clean code? Explain why or why not. If not, refactor 
the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

At first glance, this is absolutely not clean code solely because of the comments. There is no 
reason for there to be a comment explaining every single line of code. Also, variable names and 
function names should be meaningful and easy to understand at a glance. There's a lot of "x" and 
"y" and such in here. 

Here's what I can come up with for refactored code:

FUNCTION tempConversion(temp, tempType)
  IF temp = "F" THEN
    SET RESULT to (temp-32) * (5/9)
    PRINT RESULT
  ELSE IF temp = "C" THEN
    SET RESULT to temp * 1.8000 + 32.00
    PRINT REFULT
  END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor 
the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

This code does look clean to me. It is quick and easy to read. You can tell what each line is 
doing. The indentation looks appropriately utilized. The objects and functions and variables are 
all named in a clear way so that the programmer can look at them and know exactly what they 
represent and should be doing.


5. Using pseudocode, refactor the code for the following examples using the principles you have 
learned in this checkpoint.


  a. The following function prints the subtotal of a customer's transaction and receives payment 
  accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

REFACTORED:

FUNCTION checkoutCalculation(subTotal, discountRate, tax)
  RETURN subTotal * discountRate + (subTotal * tax)
END FUNCTION

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  PRINT "Your total due is: " + checkoutCalculation(1, 2, 3)
  IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - checkoutCalculation(1, 2, 3)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " checkoutCalculation(1, 2, 3)
   END IF
END FUNCTION


  b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

REFACTORED:

FUNCTION checkoutBook(book, guest)
  IF guest.accountActive 
    AND guest.hasOverdueBooks = FALSE 
    AND guest.outstandingFees = 0 THEN
      APPEND book to guest.books
      SET book.status to "Checked Out"
        PRINT "Your books have been issued."
  ELSE 
    PRINT "Unable to check out book."
  END IF
END FUNCTION 


  c. The following class is a code snippet that should support the transactions 
  a customer can 
  perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

REFACTORED:

CLASS BankAccount
  FUNCTION displayBalance
    PRINT balance
  END FUNCTION
END CLASS

CLASS Deposit
  FUNCTION deposit(amount)
    SET balance to balance + amount
  END FUNCTION
END CLASS

CLASS Withdraw
  FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END
  END FUNCTION
END CLASS 

CLASS Offer
  FUNCTION creditCardOffer
    IF NOT(customer.hasCreditCard) THEN
      CALL offerCreditCard
    END
  END FUNCTION
END CLASS

CLASS Check
  FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
      CALL offerCheckingAccount
    END
  END FUNCTION
END CLASS



PROGRAMMING QUESTIONS

You may do the following problems in any language of your choice. Use the clean 
code principles taught in this section while writing the code.

1. Square: Given an array of integers, find out whether the sum of the integers 
is a perfect square. If it is a perfect square, return the square root, 
otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function squared(array) {
  let sum = 0;
  for (let i = 0; i <= array; i++) {
    sum += i;
  }
  const squareRoot = Math.sqrt(sum);
  if (squareRoot % === 0) {
    return squareRoot
  }
  return sum;
}


2. Duplicate: Given an array of integers, find out whether the array contains any duplicate 
elements. The function should return true if any value appears at least twice in the array, and 
false if every element is distinct.

function containsDuplicate(array) {
  for (let i = 0; i < array.length; i++) {
    for (let k = 0; k < array.length; k++) {
      if (array[k] === array[i] && i !== k) {
        return true;
      }
    }
  }
  return false;
}
