EXERCISES

1. What is time complexity and what is its relation to algorithms?

Time Complexity is expressed as a function that estimates the time it takes to execute a program. To determine time complexity, we calculate how quickly the time to run the program grows relative to the amount of input we feed into the program. We estimate time complexity assuming the input is infinite. Time complexity of an algorithm signifies the total time required by the program to run till its completion.



2. What is runtime?

Runtime is the physical time duration of an algorithm; it is also synonymous with time complexity.



3. How is the runtime of an algorithm calculated?

To calculate the runtime of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants.



4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot on your list.

  1. Constant Growth Rate 
  2. Logrithmic Growth Rate 
  3. Linear Growth Rate 
  4. Loglinear Growth Rate 
  5. Quadratic Growth Rate 
  6. Cubic Growth Rate
  7. Exponential Growth Rate 



5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

An example of exponential growth in the real world is mitosis, where a single cell will divide into two, and then each of those two cells will again divide into two cells, and so on. 



6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Time complexity: 0(n)



7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Time complexity: O(n^2)



8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Time complexity: O(2^n)



9. Out of the code snippets you just saw, which is the most time efficient?

The snippets above are represented by, in order:
Linear Growth Rate
Quadratic Growth Rate 
Exponential Growth Rate

Therefore, the first snippet of code, with the Linear Growth Rate, is the most efficient. 